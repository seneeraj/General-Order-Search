import streamlit as st
import fitz  # PyMuPDF
import re
from collections import defaultdict
from docx import Document  # for DOCX

st.set_page_config(page_title="GO Explorer (Hindi Files)", layout="wide")
st.title("üìò General Order Explorer (‡§Ö‡§ß‡•ç‡§Ø‡§æ‡§Ø / ‡§≠‡§æ‡§ó / ‡§ñ‡§Ç‡§° / ‡§∏‡•á‡§ï‡•ç‡§∂‡§®)")

uploaded_file = st.file_uploader("üìÑ Upload a Hindi PDF or DOCX (Unicode only)", type=["pdf", "docx"])

@st.cache_data(show_spinner=True)
def extract_text(file, filetype):
    if filetype == "pdf":
        doc = fitz.open(stream=file.read(), filetype="pdf")
        return "\n".join([page.get_text() for page in doc])
    elif filetype == "docx":
        doc = Document(file)
        return "\n".join([p.text for p in doc.paragraphs])
    return ""

def parse_structure(text, division_type):
    structure = defaultdict(dict)

    # Regex pattern based on selected division type
    if division_type == "‡§Ö‡§ß‡•ç‡§Ø‡§æ‡§Ø":
        pattern = r"(‡§Ö‡§ß‡•ç‡§Ø‡§æ‡§Ø\s*\d+[^\n]*)"
    elif division_type == "‡§≠‡§æ‡§ó":
        pattern = r"(‡§≠‡§æ‡§ó\s*\d+[^\n]*)"
    elif division_type == "‡§ñ‡§Ç‡§°":
        pattern = r"(‡§ñ‡§Ç‡§°\s*\d+[^\n]*)"
    elif division_type == "‡§∏‡•á‡§ï‡•ç‡§∂‡§®":
        pattern = r"(‡§∏‡•á‡§ï‡•ç‡§∂‡§®\s*\d+[^\n]*)"
    else:
        pattern = r"(‡§Ö‡§ß‡•ç‡§Ø‡§æ‡§Ø\s*\d+[^\n]*)"  # fallback

    chapters = list(re.finditer(pattern, text))

    for i, chap in enumerate(chapters):
        chap_title = chap.group().strip()
        start = chap.end()
        end = chapters[i+1].start() if i+1 < len(chapters) else len(text)
        chap_text = text[start:end]

        rules = list(re.finditer(r"(‡§®‡§ø‡§Ø‡§Æ\s*\d+[^\n]*)", chap_text))
        if not rules:
            structure[chap_title]["(‡§ï‡•ã‡§à ‡§®‡§ø‡§Ø‡§Æ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ)"] = chap_text.strip()
        else:
            for j, rule in enumerate(rules):
                rule_title = rule.group().strip()
                r_start = rule.end()
                r_end = rules[j+1].start() if j+1 < len(rules) else len(chap_text)
                rule_text = chap_text[r_start:r_end].strip()
                structure[chap_title][rule_title] = rule_text
    return structure

if uploaded_file:
    filetype = "pdf" if uploaded_file.type == "application/pdf" else "docx"
    text = extract_text(uploaded_file, filetype)

    # Step 1: Select division type
    division_type = st.selectbox(
        "üìñ ‡§¶‡§∏‡•ç‡§§‡§æ‡§µ‡•á‡§ú‡§º ‡§µ‡§ø‡§≠‡§æ‡§ú‡§® ‡§ö‡•Å‡§®‡•á‡§Ç",
        ["‡§Ö‡§ß‡•ç‡§Ø‡§æ‡§Ø", "‡§≠‡§æ‡§ó", "‡§ñ‡§Ç‡§°", "‡§∏‡•á‡§ï‡•ç‡§∂‡§®"],
        index=0
    )

    # Step 2: Parse text
    structure = parse_structure(text, division_type)

    chapters = list(structure.keys())
    if chapters:
        selected_chap = st.selectbox(f"üìö {division_type} ‡§ö‡•Å‡§®‡•á‡§Ç", chapters, index=None, placeholder=f"üìö {division_type} ‡§ö‡•Å‡§®‡•á‡§Ç")
        if selected_chap:
            rules = list(structure[selected_chap].keys())
            selected_rule = st.selectbox("üìå ‡§®‡§ø‡§Ø‡§Æ ‡§ö‡•Å‡§®‡•á‡§Ç", rules)
            if selected_rule:
                st.markdown(f"### üìÑ {selected_rule}")
                st.text_area("üìù ‡§®‡§ø‡§Ø‡§Æ ‡§ï‡§æ ‡§µ‡§ø‡§µ‡§∞‡§£", structure[selected_chap][selected_rule], height=500)
    else:
        st.warning("‚ùå ‡§ï‡•ã‡§à ‡§Ö‡§ß‡•ç‡§Ø‡§æ‡§Ø/‡§≠‡§æ‡§ó/‡§ñ‡§Ç‡§°/‡§∏‡•á‡§ï‡•ç‡§∂‡§® ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ø‡•Ç‡§®‡§ø‡§ï‡•ã‡§° ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§´‡§º‡§æ‡§á‡§≤ ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç‡•§")
